{
  "openapi": "3.0.0",
  "info": {
    "title": "Express API for comp-4537-assignment",
    "version": "1.0.0"
  },
  "paths": {
    "/users": {
      "get": {
        "summary": "Retrieve a list of users",
        "description": "Retrieve a list of users from the database.",
        "responses": {
          "200": {
            "description": "A list of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "description": "The user's email."
                      },
                      "apiCallCounter": {
                        "type": "integer",
                        "description": "The number of API calls made by the user."
                      },
                      "isAdmin": {
                        "type": "boolean",
                        "description": "Whether the user is an admin."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Register a new user",
        "description": "Creates a new user with the provided data.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The email of the user."
                  },
                  "password": {
                    "type": "string",
                    "description": "The password for the user."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully."
          },
          "400": {
            "description": "Bad request if the input data is invalid."
          }
        }
      }
    },
    "/reset-api-call-count/{email}": {
      "patch": {
        "summary": "Reset API call count",
        "description": "Resets the API call count for a user with the specified email.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The email of the user whose API call count is to be reset."
          }
        ],
        "responses": {
          "200": {
            "description": "API call count reset successfully."
          },
          "401": {
            "description": "Unauthorized if the user is not authenticated."
          },
          "403": {
            "description": "Forbidden if the user is not an admin."
          },
          "404": {
            "description": "Not found if the user does not exist."
          }
        }
      }
    },
    "/api-call-count": {
      "get": {
        "summary": "Get the API call count for the current user",
        "description": "Returns the number of API calls made by the authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The API call count of the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The number of API calls made by the user."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized if the user is not authenticated."
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "summary": "Log in a user",
        "description": "Authenticates the user with email and password.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The email of the user."
                  },
                  "password": {
                    "type": "string",
                    "description": "The password for the user."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful."
          },
          "401": {
            "description": "Unauthorized if the credentials are invalid."
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "summary": "Log out a user",
        "description": "Ends the session for the current user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful."
          },
          "401": {
            "description": "Unauthorized if the user is not authenticated."
          }
        }
      }
    },
    "/verify-token": {
      "get": {
        "summary": "Verify JWT token",
        "description": "Checks if the provided JWT token is valid and returns the associated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token is valid.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A message stating the token is valid."
                    },
                    "user": {
                      "type": "object",
                      "description": "The user object associated with the valid token."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized if the token is invalid or expired."
          }
        }
      }
    },
    "/forgot-password": {
      "post": {
        "summary": "Initiate password reset",
        "description": "Sends a password reset link to the user's email.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The email of the user requesting password reset."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent."
          },
          "400": {
            "description": "Bad request if the email is not provided or invalid."
          }
        }
      }
    },
    "/reset-password/{token}": {
      "post": {
        "summary": "Reset password",
        "description": "Allows the user to reset their password using a valid token.",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The password reset token."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "newPassword"
                ],
                "properties": {
                  "newPassword": {
                    "type": "string",
                    "description": "The new password for the user."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully."
          },
          "400": {
            "description": "Bad request if the password is not provided or invalid."
          },
          "404": {
            "description": "Not found if the token is invalid or expired."
          }
        }
      }
    },
    "/chat": {
      "post": {
        "summary": "Send a chat message",
        "description": "Sends a chat message to the AI and receives a response.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "messages"
                ],
                "properties": {
                  "messages": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "An array of messages sent by the user."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Received AI response to the chat message."
          },
          "401": {
            "description": "Unauthorized if the user is not authenticated."
          },
          "403": {
            "description": "Forbidden if the API call limit is exceeded."
          }
        }
      }
    },
    "/generate-image": {
      "post": {
        "summary": "Generate an image",
        "description": "Generates an image based on the provided prompt using AI.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "prompt"
                ],
                "properties": {
                  "prompt": {
                    "type": "string",
                    "description": "The prompt based on which the AI generates an image."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Image generated successfully."
          },
          "401": {
            "description": "Unauthorized if the user is not authenticated."
          },
          "403": {
            "description": "Forbidden if the API call limit is exceeded."
          }
        }
      }
    },
    "/delete-user/{email}": {
      "delete": {
        "summary": "Delete a user",
        "description": "Deletes a user with the specified email.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The email of the user to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully."
          },
          "401": {
            "description": "Unauthorized if the user is not authenticated."
          },
          "403": {
            "description": "Forbidden if the user is not an admin."
          },
          "404": {
            "description": "Not found if the user does not exist."
          }
        }
      }
    }
  },
  "components": {},
  "tags": []
}